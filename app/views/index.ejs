<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no" />
    <meta name="description" content="" />
    <meta name="author" content="" />

        <!-- <link rel="icon" type="image/x-icon" href="assets/favicon.ico" /> -->
        <!-- Font Awesome icons (free version)-->
        <!-- <script src="https://use.fontawesome.com/releases/v6.3.0/js/all.js" crossorigin="anonymous"></script> -->
        <!-- Google fonts-->
        <!-- <link href="https://fonts.googleapis.com/css?family=Montserrat:400,700" rel="stylesheet" type="text/css" /> -->
        <!-- <link href="https://fonts.googleapis.com/css?family=Lato:400,700,400italic,700italic" rel="stylesheet" type="text/css" /> -->
        <!-- Core theme CSS (includes Bootstrap)-->
        <link href="css/styles.css" rel="stylesheet" />

        <!-- Swiper CSS -->
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/swiper@10/swiper-bundle.min.css" />

        <script src="js/scripts.js"></script>

    <title>Weather</title>

    <!-- Include Swiper JS -->
    <script src="https://cdn.jsdelivr.net/npm/swiper@10/swiper-bundle.min.js"></script>

    <%
        function formatDateComparison(dateTimeString) {
            const date = new Date(dateTimeString);
            const formattedDate = date.toLocaleString('en-US', {
                month: 'numeric',
                day: 'numeric',
                year: 'numeric',
            });
            return formattedDate;
        }
        function formatTimeComparison(dateTimeString) {
            const date = new Date(dateTimeString);
            const formattedDate = date.toLocaleString('en-US', {
                hour: 'numeric',
                minute: 'numeric',
                hour12: true,
                <!-- timeZoneName: 'short', -->
            });
            return formattedDate;
        }
        function formatDate(dateTimeString) {
            const date = new Date(dateTimeString)
            const formattedDate = date.toLocaleDateString()
            return formattedDate
        }
        function formatTime(dateTimeString) {
            const date = new Date(dateTimeString)
            const formattedDate = date.toLocaleTimeString()
            return formattedDate
        }
        function formatUnitCode(unitcode) {
            const unit = unitcode.substring(unitcode.lastIndexOf(':') + 1)
            return unit
        }
        function celsiusToFahrenheit(celsius) {
            const fahrenheit = (celsius * 9/5) + 32;
            return fahrenheit;
        }
        function fahrenheitToCelsius(fahrenheit) {
            const celsius = (fahrenheit - 32) * 5/9;
            return celsius;
        }
        function getDailyHighs(forecasthourly) {
            let today = new Date()
            let lastdate = new Date(forecasthourly[forecasthourly.length - 1].startTime)

            today.setHours(0,0,0,0)
            lastdate.setHours(0,0,0,0)

            let timeDifference = lastdate.getTime() - today.getTime()
            let daysDifference = Math.floor(timeDifference / (1000 * 60 * 60 * 24))
 
            let dailyhighs = []
            for (let i = 0; i < daysDifference + 1; i++) {
                const newdate = new Date()
                dailyhighs[i] = [formatDateComparison(newdate.setDate(today.getDate() + i)),-999,000]
            }  

            forecasthourly.forEach((hourly) => {
                let forecastdate = formatDateComparison(hourly.startTime)
                for (let i = 0; i < daysDifference + 1; i++) {
                    if (forecastdate == dailyhighs[i][0]) {
                        if (hourly.temperature > dailyhighs[i][1]) { 
                            dailyhighs[i] = [forecastdate,hourly.temperature,formatTimeComparison(hourly.startTime)]
                        }
                    }
                } 
            });

            return dailyhighs
        }
        function getDailyLows(forecasthourly) {
            let today = new Date()
            let lastdate = new Date(forecasthourly[forecasthourly.length - 1].startTime)

            today.setHours(0,0,0,0)
            lastdate.setHours(0,0,0,0)

            let timeDifference = lastdate.getTime() - today.getTime()
            let daysDifference = Math.floor(timeDifference / (1000 * 60 * 60 * 24))
 
            let dailylows = []
            for (let i = 0; i < daysDifference + 1; i++) {
                const newdate = new Date()
                dailylows[i] = [formatDateComparison(newdate.setDate(today.getDate() + i)),999,000]
            }  

            forecasthourly.forEach((hourly) => {
                let forecastdate = formatDateComparison(hourly.startTime)
                for (let i = 0; i < daysDifference + 1; i++) {
                    if (forecastdate == dailylows[i][0]) {
                        if (hourly.temperature < dailylows[i][1]) { 
                            dailylows[i] = [forecastdate,hourly.temperature,formatTimeComparison(hourly.startTime)]
                        }
                    }
                } 
            });

            return dailylows
        }

        let showForecast = false
        let timezone = ""
        let griddata = ""
        
        if (locals.forecast && locals.forecast.length > 0) {
            showForecast = true
            forecastalerts = forecast[0].forecastalerts
            forecasthourly = forecast[0].forecasthourly
            forecastdaily = forecast[0].forecastdaily
            griddata = forecast[0].griddata
            timezone = forecast[0].forecastdaily[0].startTime.substring(forecast[0].forecastdaily[0].startTime.length - 6)
            
            dailyhighs = getDailyHighs(forecasthourly)
            dailylows = getDailyLows(forecasthourly)
        }

        


    %>
    </head>
    <!-- <body id="page-top"> -->
    <body>
        <div style="text-align: left;">
            easyweather.app
        </div>
        <br />
        <div style="text-align: center;">
            <form style="display: inline-block;" action="" method="post">
                    <input type="search" id="search" name="search" required />
                    <button type="submit">Search</button><br />
                    <% if (showForecast == false) { %>
                    <small>
                        60601 (Least accurate)<br />
                        Chicago IL (More accurate) <br />
                        233 S Wacker Dr Chicago IL (Most accurate)
                    </small>
                    <% } %>
                  </form>  
            </form>
        </div>
        <br />
        <% if (showForecast == true) { %>
            <div style="text-align: center; border-style: dotted;">
                <h2><%= forecast[0].addressname %></h2>
                <h3><%= forecasthourly[0].temperature %>&#176; <%= forecasthourly[0].temperatureUnit %></h3><span style="color:red;">&#8595;</span><span style="color:green";>&#8593;</span>
                
                <h4><%= forecasthourly[0].shortForecast %></h4>
                <h5>Timezone (<%= timezone %>)</h5>
                <h5>Elevation (<%= Math.round(griddata.elevation.value) %><%= formatUnitCode(griddata.elevation.unitCode) %>)</h5>
            </div>
            <% if (forecastalerts && forecastalerts.length > 0) {%>
                <h3>Alerts</h3>
                
                <% forecastalerts.forEach((alerts) => { %>
                    <ul>
                        <li>
                            Starts: <%= formatDateComparison(alerts.properties.onset)%> <%= formatTime(alerts.properties.onset) %>
                        </li>
                        <li>
                            Expires <%= formatDateComparison(alerts.properties.expires)%> <%= formatTime(alerts.properties.expires) %>
                        </li>
                        <li>
                            Area Affected:<br />
                            <%= alerts.properties.areaDesc %>
                        </li>
                        <li>
                            <%= alerts.properties.senderName %>
                        </li>
                        <li>
                            <%= alerts.properties.headline %>
                        </li>
                        <li>
                            <%= alerts.properties.description %>
                        </li>
                        <li>
                            <%= alerts.properties.instruction %>
                        </li>
                    </ul>
                    
                <% }) %>
            <% } %>    
        
        <div style="text-align: center;">
            <p>Ski/Snowboard View, Surfing View, ...</p>

            ALERTS ARE NOT BEING DISPLAYED AT THIS TIME<br /><br />
    
            Todays temperatures<br />

Perhaps instead of depending on the daily forecast we calculate dawn/dusk and use the hourly to determine the high/lows. Then we can use the daily for the actual forecast descriptions.
           
            <br /><br />
            
            Feels Like<br />
            griddata.apparentTemperature.values["validTime","value"]<Br /><Br />
            Heat Index<br />
            griddata.heatIndex.values["validTime","value"]<Br /><Br />
            Wind Chill<br />
            griddata.windChill.values["validTime","value"]<Br /><Br />
            Sky Cover<br />
            griddata.skyCover.values["validTime","value"]<Br /><Br />
            Amount of Precipitation<br />
            griddata.quantitativePrecipitation.uom #Unit
            griddata.quantitativePrecipitation.values["validTime","value"]<Br /><Br />
            Ice Accumulation<br />
            griddata.iceAccumulation.uom #Unit
            griddata.iceAccumulation.values["validTime","value"]<Br /><Br />
            Snowfall Amount<br />
            griddata.snowfallAmount.uom #Unit
            griddata.snowfallAmount.values["validTime","value"]<Br /><Br />
            probabilityOfThunder<br /><br />
        </div>
   
        <div style="text-align: center;">
            <h3>Hourly (<%= forecast[0].forecasthourly.length %>)</h3>
            <div class="swiper" id="swiper-hourly">
                <div class="swiper-wrapper">
              <%
                if (showForecast == true) {
                  forecast.forEach((type) => {
                    type.forecasthourly.forEach((hourly) => {
              %>
                    <div class="swiper-slide">
                        <%= formatDate(hourly.startTime) %><br />
                        <img src="<%= hourly.icon.replace(',0?size=small','?size=large') %>" /><br />
                        <strong><%= hourly.temperature %>&#176; <%= hourly.temperatureUnit %></strong><br />
                        <% if (hourly.probabilityOfPrecipitation.value > 0) { %>
                            <%= hourly.probabilityOfPrecipitation.value %>% chance of precipitation<br />
                        <% } %>
                        <% if (hourly.temperatureTrend != null) { %>
                            <small>(Temperature is <%= hourly.temperatureTrend %>)</small><br /><br />
                        <% } else { %>
                            <br />
                        <% } %>
                        Humidity: <%= hourly.relativeHumidity.value %>%<br />
                        Wind Speed: <%= hourly.windSpeed %><br />
                        Wind Direction: <%= hourly.windDirection %> <br /><br />
                        <%= hourly.shortForecast %>
                    </div>
              <%
                })})};
              %>
                </div>
                <div class="swiper-button-prev"></div>
                <div class="swiper-button-next"></div>
            </div>
        </div>
        
            <h3>Daily Highs</h3>
            <%=  dailyhighs %>
            <h3>Daily Lows</h3>
            <%= dailylows %>

        <div style="text-align: center;">
            <h3>7 Day Forecast(<%= forecast[0].forecastdaily.length %>)</h3>
            <div class="swiper" id="swiper-7day">
                <div class="swiper-wrapper">
              <%
                if (showForecast == true) {
                  forecast.forEach((type) => {
                    type.forecastdaily.forEach((weekly) => {
              %>
                    <div class="swiper-slide">
                        <%= weekly.name %> (<%= formatDate(weekly.startTime) %><br />
                        <img src="<%= weekly.icon.replace('medium','large') %>" /><br />
                        <strong><%= weekly.temperature %>&#176; <%= weekly.temperatureUnit %>
                        <% 
                            for (let i = 0; i < dailyhighs.length; i++) {
                                if (dailyhighs[i][0] == formatDate(weekly.startTime)) {
                        %>
                                    at <%= dailyhighs[i][2] %>
                        <%
                                }
                            }
                            for (let i = 1; i < dailylows.length; i++) {
                                overnightdate = new Date(weekly.startTime)
                                overnightdate = formatDate(overnightdate.setDate(overnightdate.getDate() + 1))
                                if ((dailylows[i][0] == overnightdate)) {
                        %>
                                    at <%= dailylows[i][2] %>
                        <%
                                }
                            }
                        %>
                        </strong><br />
                        <% if (weekly.probabilityOfPrecipitation.value > 0) { %>
                            <%= weekly.probabilityOfPrecipitation.value %>% chance of precipitation<br />
                        <% } %>
                        <% if (weekly.temperatureTrend != null) { %>
                            <small>(Temperature is <%= weekly.temperatureTrend %>)</small><br /><br />
                        <% } else { %>
                            <br />
                        <% } %>
                        Humidity: <%= weekly.relativeHumidity.value %>%<br />
                        Wind Speed: <%= weekly.windSpeed %><br />
                        Wind Direction: <%= weekly.windDirection %> <br /><br />
                        <%= weekly.detailedForecast %>
                    </div>
              <%
                })})};
              %>
                </div>
                <div class="swiper-button-prev"></div>
                <div class="swiper-button-next"></div>
            </div>
        </div>
        Forecast is from <%= formatDate(forecast[0].forecastfrom) %> <%= formatTime(forecast[0].forecastfrom) %>
        <% } %>
        <br />
        <div style="text-align: center;">
            &#169; <%= new Date().getFullYear() %> easyweather.app
        </div>

        <% if (locals.forecast && locals.forecast.length > 0) { %>
        <hr>
        <%= //JSON.stringify(forecast) %>
        <% } else { %>
        <p>No forecast is available</p>
        <% } %>
        
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            var swiperHourly = new Swiper('#swiper-hourly', {
                // Add your swiper configuration options here
                // For example:
                navigation: {
                    nextEl: '.swiper-button-next',
                    prevEl: '.swiper-button-prev'
                }
            });
        });
        document.addEventListener('DOMContentLoaded', function () {
            var swiper7day = new Swiper('#swiper-7day', {
                // Add your swiper configuration options here
                // For example:
                navigation: {
                    nextEl: '.swiper-button-next',
                    prevEl: '.swiper-button-prev'
                }
            });
        });
    </script>

    </body> 



</html>
